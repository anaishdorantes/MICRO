

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Thu Feb 08 23:40:55 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    11                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    12                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    14   000000                     
    15                           ; Generated 23/03/2023 GMT
    16                           ; 
    17                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution. Publication is not required when
    31                           ;        this file is used in an embedded application.
    32                           ; 
    33                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    34                           ;        software without specific prior written permission.
    35                           ; 
    36                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    37                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    38                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    39                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    40                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    41                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    42                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    43                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    44                           ; 
    45                           ; 
    46                           ; Code-generator required, PIC18F4550 Definitions
    47                           ; 
    48                           ; SFR Addresses
    49   000000                     
    50                           	psect	idataCOMRAM
    51   000998                     __pidataCOMRAM:
    52                           	callstack 0
    53                           
    54                           ;initializer for _display_array
    55   000998  003F               	dw	63
    56   00099A  0006               	dw	6
    57   00099C  005B               	dw	91
    58   00099E  004F               	dw	79
    59   0009A0  0066               	dw	102
    60   0009A2  006D               	dw	109
    61   0009A4  007C               	dw	124
    62   0009A6  0047               	dw	71
    63   0009A8  007F               	dw	127
    64   0009AA  0067               	dw	103
    65   0009AC  0077               	dw	119
    66   0009AE  007C               	dw	124
    67   0009B0  0039               	dw	57
    68   0009B2  005E               	dw	94
    69   0009B4  0079               	dw	121
    70   0009B6  0071               	dw	113
    71   000000                     _PORTD	set	3971
    72   000000                     _TRISB	set	3987
    73   000000                     _ADCON1	set	4033
    74   000000                     _TRISD	set	3989
    75   000000                     _LATB	set	3978
    76                           
    77                           ; #config settings
    78                           
    79                           	psect	cinit
    80   000972                     __pcinit:
    81                           	callstack 0
    82   000972                     start_initialization:
    83                           	callstack 0
    84   000972                     __initialization:
    85                           	callstack 0
    86                           
    87                           ; Initialize objects allocated to COMRAM (32 bytes)
    88                           ; load TBLPTR registers with __pidataCOMRAM
    89   000972  0E98               	movlw	low __pidataCOMRAM
    90   000974  6EF6               	movwf	tblptrl,c
    91   000976  0E09               	movlw	high __pidataCOMRAM
    92   000978  6EF7               	movwf	tblptrh,c
    93   00097A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
    94   00097C  6EF8               	movwf	tblptru,c
    95   00097E  EE00  F001         	lfsr	0,__pdataCOMRAM
    96   000982  EE10 F020          	lfsr	1,32
    97   000986                     copy_data0:
    98   000986  0009               	tblrd		*+
    99   000988  CFF5 FFEE          	movff	tablat,postinc0
   100   00098C  50E5               	movf	postdec1,w,c
   101   00098E  50E1               	movf	fsr1l,w,c
   102   000990  E1FA               	bnz	copy_data0
   103   000992                     end_of_initialization:
   104                           	callstack 0
   105   000992                     __end_of__initialization:
   106                           	callstack 0
   107   000992  0100               	movlb	0
   108   000994  EF01  F004         	goto	_main	;jump to C main() function
   109                           
   110                           	psect	dataCOMRAM
   111   000001                     __pdataCOMRAM:
   112                           	callstack 0
   113   000001                     _display_array:
   114                           	callstack 0
   115   000001                     	ds	32
   116                           
   117                           	psect	cstackCOMRAM
   118   000000                     __pcstackCOMRAM:
   119                           	callstack 0
   120   000000                     
   121                           ; 1 bytes @ 0x0
   122 ;;
   123 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   124 ;;
   125 ;; *************** function _main *****************
   126 ;; Defined at:
   127 ;;		line 8 in file "main.c"
   128 ;; Parameters:    Size  Location     Type
   129 ;;		None
   130 ;; Auto vars:     Size  Location     Type
   131 ;;		None
   132 ;; Return value:  Size  Location     Type
   133 ;;                  1    wreg      void 
   134 ;; Registers used:
   135 ;;		wreg, status,2, status,0
   136 ;; Tracked objects:
   137 ;;		On entry : 0/0
   138 ;;		On exit  : 0/0
   139 ;;		Unchanged: 0/0
   140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   141 ;;      Params:         0       0       0       0       0       0       0       0       0
   142 ;;      Locals:         0       0       0       0       0       0       0       0       0
   143 ;;      Temps:          0       0       0       0       0       0       0       0       0
   144 ;;      Totals:         0       0       0       0       0       0       0       0       0
   145 ;;Total ram usage:        0 bytes
   146 ;; This function calls:
   147 ;;		Nothing
   148 ;; This function is called by:
   149 ;;		Startup code after reset
   150 ;; This function uses a non-reentrant model
   151 ;;
   152                           
   153                           	psect	text0
   154   000802                     __ptext0:
   155                           	callstack 0
   156   000802                     _main:
   157                           	callstack 31
   158   000802                     l17:
   159   000802                     
   160                           ;main.c: 10:         ADCON1 = 0B00001111;
   161   000802  0E0F               	movlw	15
   162   000804  6EC1               	movwf	193,c	;volatile
   163                           
   164                           ;main.c: 11:         TRISB = 0;
   165   000806  0E00               	movlw	0
   166   000808  6E93               	movwf	147,c	;volatile
   167                           
   168                           ;main.c: 12:         TRISD = 1;
   169   00080A  0E01               	movlw	1
   170   00080C  6E95               	movwf	149,c	;volatile
   171                           
   172                           ;main.c: 13:         if(PORTD == 0){
   173   00080E  5083               	movf	131,w,c	;volatile
   174   000810  A4D8               	btfss	status,2,c
   175   000812  EF0D  F004         	goto	u11
   176   000816  EF0F  F004         	goto	u10
   177   00081A                     u11:
   178   00081A  EF11  F004         	goto	l716
   179   00081E                     u10:
   180   00081E                     
   181                           ;main.c: 14:             LATB = display_array[0];
   182   00081E  C001  FF8A         	movff	_display_array,3978	;volatile
   183   000822                     l716:
   184                           
   185                           ;main.c: 16:         if(PORTD == 1){
   186   000822  0483               	decf	131,w,c	;volatile
   187   000824  A4D8               	btfss	status,2,c
   188   000826  EF17  F004         	goto	u21
   189   00082A  EF19  F004         	goto	u20
   190   00082E                     u21:
   191   00082E  EF1B  F004         	goto	l720
   192   000832                     u20:
   193   000832                     
   194                           ;main.c: 17:             LATB = display_array[1];
   195   000832  C003  FF8A         	movff	_display_array+2,3978	;volatile
   196   000836                     l720:
   197                           
   198                           ;main.c: 19:         if(PORTD == 2){
   199   000836  0E02               	movlw	2
   200   000838  1883               	xorwf	131,w,c	;volatile
   201   00083A  A4D8               	btfss	status,2,c
   202   00083C  EF22  F004         	goto	u31
   203   000840  EF24  F004         	goto	u30
   204   000844                     u31:
   205   000844  EF26  F004         	goto	l724
   206   000848                     u30:
   207   000848                     
   208                           ;main.c: 20:             LATB = display_array[2];
   209   000848  C005  FF8A         	movff	_display_array+4,3978	;volatile
   210   00084C                     l724:
   211                           
   212                           ;main.c: 22:         if(PORTD == 3){
   213   00084C  0E03               	movlw	3
   214   00084E  1883               	xorwf	131,w,c	;volatile
   215   000850  A4D8               	btfss	status,2,c
   216   000852  EF2D  F004         	goto	u41
   217   000856  EF2F  F004         	goto	u40
   218   00085A                     u41:
   219   00085A  EF31  F004         	goto	l728
   220   00085E                     u40:
   221   00085E                     
   222                           ;main.c: 23:             LATB = display_array[3];
   223   00085E  C007  FF8A         	movff	_display_array+6,3978	;volatile
   224   000862                     l728:
   225                           
   226                           ;main.c: 25:         if(PORTD == 4){
   227   000862  0E04               	movlw	4
   228   000864  1883               	xorwf	131,w,c	;volatile
   229   000866  A4D8               	btfss	status,2,c
   230   000868  EF38  F004         	goto	u51
   231   00086C  EF3A  F004         	goto	u50
   232   000870                     u51:
   233   000870  EF3C  F004         	goto	l732
   234   000874                     u50:
   235   000874                     
   236                           ;main.c: 26:             LATB = display_array[4];
   237   000874  C009  FF8A         	movff	_display_array+8,3978	;volatile
   238   000878                     l732:
   239                           
   240                           ;main.c: 28:         if(PORTD == 5){
   241   000878  0E05               	movlw	5
   242   00087A  1883               	xorwf	131,w,c	;volatile
   243   00087C  A4D8               	btfss	status,2,c
   244   00087E  EF43  F004         	goto	u61
   245   000882  EF45  F004         	goto	u60
   246   000886                     u61:
   247   000886  EF47  F004         	goto	l736
   248   00088A                     u60:
   249   00088A                     
   250                           ;main.c: 29:             LATB = display_array[5];
   251   00088A  C00B  FF8A         	movff	_display_array+10,3978	;volatile
   252   00088E                     l736:
   253                           
   254                           ;main.c: 31:         if(PORTD == 6){
   255   00088E  0E06               	movlw	6
   256   000890  1883               	xorwf	131,w,c	;volatile
   257   000892  A4D8               	btfss	status,2,c
   258   000894  EF4E  F004         	goto	u71
   259   000898  EF50  F004         	goto	u70
   260   00089C                     u71:
   261   00089C  EF52  F004         	goto	l740
   262   0008A0                     u70:
   263   0008A0                     
   264                           ;main.c: 32:             LATB = display_array[6];
   265   0008A0  C00D  FF8A         	movff	_display_array+12,3978	;volatile
   266   0008A4                     l740:
   267                           
   268                           ;main.c: 34:         if(PORTD == 7){
   269   0008A4  0E07               	movlw	7
   270   0008A6  1883               	xorwf	131,w,c	;volatile
   271   0008A8  A4D8               	btfss	status,2,c
   272   0008AA  EF59  F004         	goto	u81
   273   0008AE  EF5B  F004         	goto	u80
   274   0008B2                     u81:
   275   0008B2  EF5D  F004         	goto	l744
   276   0008B6                     u80:
   277   0008B6                     
   278                           ;main.c: 35:             LATB = display_array[7];
   279   0008B6  C00F  FF8A         	movff	_display_array+14,3978	;volatile
   280   0008BA                     l744:
   281                           
   282                           ;main.c: 37:         if(PORTD == 8){
   283   0008BA  0E08               	movlw	8
   284   0008BC  1883               	xorwf	131,w,c	;volatile
   285   0008BE  A4D8               	btfss	status,2,c
   286   0008C0  EF64  F004         	goto	u91
   287   0008C4  EF66  F004         	goto	u90
   288   0008C8                     u91:
   289   0008C8  EF68  F004         	goto	l748
   290   0008CC                     u90:
   291   0008CC                     
   292                           ;main.c: 38:             LATB = display_array[8];
   293   0008CC  C011  FF8A         	movff	_display_array+16,3978	;volatile
   294   0008D0                     l748:
   295                           
   296                           ;main.c: 40:         if(PORTD == 9){
   297   0008D0  0E09               	movlw	9
   298   0008D2  1883               	xorwf	131,w,c	;volatile
   299   0008D4  A4D8               	btfss	status,2,c
   300   0008D6  EF6F  F004         	goto	u101
   301   0008DA  EF71  F004         	goto	u100
   302   0008DE                     u101:
   303   0008DE  EF73  F004         	goto	l752
   304   0008E2                     u100:
   305   0008E2                     
   306                           ;main.c: 41:             LATB = display_array[9];
   307   0008E2  C013  FF8A         	movff	_display_array+18,3978	;volatile
   308   0008E6                     l752:
   309                           
   310                           ;main.c: 43:         if(PORTD == 10){
   311   0008E6  0E0A               	movlw	10
   312   0008E8  1883               	xorwf	131,w,c	;volatile
   313   0008EA  A4D8               	btfss	status,2,c
   314   0008EC  EF7A  F004         	goto	u111
   315   0008F0  EF7C  F004         	goto	u110
   316   0008F4                     u111:
   317   0008F4  EF7E  F004         	goto	l756
   318   0008F8                     u110:
   319   0008F8                     
   320                           ;main.c: 44:             LATB = display_array[10];
   321   0008F8  C015  FF8A         	movff	_display_array+20,3978	;volatile
   322   0008FC                     l756:
   323                           
   324                           ;main.c: 46:         if(PORTD == 11){
   325   0008FC  0E0B               	movlw	11
   326   0008FE  1883               	xorwf	131,w,c	;volatile
   327   000900  A4D8               	btfss	status,2,c
   328   000902  EF85  F004         	goto	u121
   329   000906  EF87  F004         	goto	u120
   330   00090A                     u121:
   331   00090A  EF89  F004         	goto	l760
   332   00090E                     u120:
   333   00090E                     
   334                           ;main.c: 47:             LATB = display_array[11];
   335   00090E  C017  FF8A         	movff	_display_array+22,3978	;volatile
   336   000912                     l760:
   337                           
   338                           ;main.c: 49:         if(PORTD == 12){
   339   000912  0E0C               	movlw	12
   340   000914  1883               	xorwf	131,w,c	;volatile
   341   000916  A4D8               	btfss	status,2,c
   342   000918  EF90  F004         	goto	u131
   343   00091C  EF92  F004         	goto	u130
   344   000920                     u131:
   345   000920  EF94  F004         	goto	l764
   346   000924                     u130:
   347   000924                     
   348                           ;main.c: 50:             LATB = display_array[12];
   349   000924  C019  FF8A         	movff	_display_array+24,3978	;volatile
   350   000928                     l764:
   351                           
   352                           ;main.c: 52:         if(PORTD == 13){
   353   000928  0E0D               	movlw	13
   354   00092A  1883               	xorwf	131,w,c	;volatile
   355   00092C  A4D8               	btfss	status,2,c
   356   00092E  EF9B  F004         	goto	u141
   357   000932  EF9D  F004         	goto	u140
   358   000936                     u141:
   359   000936  EF9F  F004         	goto	l768
   360   00093A                     u140:
   361   00093A                     
   362                           ;main.c: 53:             LATB = display_array[13];
   363   00093A  C01B  FF8A         	movff	_display_array+26,3978	;volatile
   364   00093E                     l768:
   365                           
   366                           ;main.c: 55:         if(PORTD == 14){
   367   00093E  0E0E               	movlw	14
   368   000940  1883               	xorwf	131,w,c	;volatile
   369   000942  A4D8               	btfss	status,2,c
   370   000944  EFA6  F004         	goto	u151
   371   000948  EFA8  F004         	goto	u150
   372   00094C                     u151:
   373   00094C  EFAA  F004         	goto	l772
   374   000950                     u150:
   375   000950                     
   376                           ;main.c: 56:             LATB = display_array[14];
   377   000950  C01D  FF8A         	movff	_display_array+28,3978	;volatile
   378   000954                     l772:
   379                           
   380                           ;main.c: 58:         if(PORTD == 15){
   381   000954  0E0F               	movlw	15
   382   000956  1883               	xorwf	131,w,c	;volatile
   383   000958  A4D8               	btfss	status,2,c
   384   00095A  EFB1  F004         	goto	u161
   385   00095E  EFB3  F004         	goto	u160
   386   000962                     u161:
   387   000962  EF01  F004         	goto	l17
   388   000966                     u160:
   389   000966                     
   390                           ;main.c: 59:             LATB = display_array[15];
   391   000966  C01F  FF8A         	movff	_display_array+30,3978	;volatile
   392   00096A  EF01  F004         	goto	l17
   393   00096E  EF00  F000         	goto	start
   394   000972                     __end_of_main:
   395                           	callstack 0
   396                           
   397                           	psect	smallconst
   398   000800                     __psmallconst:
   399                           	callstack 0
   400   000800  00                 	db	0
   401   000801  00                 	db	0	; dummy byte at the end
   402   000000                     
   403                           	psect	rparam
   404   000000                     
   405                           	psect	config
   406                           
   407                           ;Config register CONFIG1L @ 0x300000
   408                           ;	PLL Prescaler Selection bits
   409                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
   410                           ;	System Clock Postscaler Selection bits
   411                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
   412                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
   413                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
   414   300000                     	org	3145728
   415   300000  00                 	db	0
   416                           
   417                           ;Config register CONFIG1H @ 0x300001
   418                           ;	Oscillator Selection bits
   419                           ;	FOSC = HS, HS oscillator (HS)
   420                           ;	Fail-Safe Clock Monitor Enable bit
   421                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   422                           ;	Internal/External Oscillator Switchover bit
   423                           ;	IESO = OFF, Oscillator Switchover mode disabled
   424   300001                     	org	3145729
   425   300001  0C                 	db	12
   426                           
   427                           ;Config register CONFIG2L @ 0x300002
   428                           ;	Power-up Timer Enable bit
   429                           ;	PWRT = OFF, PWRT disabled
   430                           ;	Brown-out Reset Enable bits
   431                           ;	BOR = ON, Brown-out Reset enabled in hardware only (SBOREN is disabled)
   432                           ;	Brown-out Reset Voltage bits
   433                           ;	BORV = 3, Minimum setting 2.05V
   434                           ;	USB Voltage Regulator Enable bit
   435                           ;	VREGEN = OFF, USB voltage regulator disabled
   436   300002                     	org	3145730
   437   300002  1F                 	db	31
   438                           
   439                           ;Config register CONFIG2H @ 0x300003
   440                           ;	Watchdog Timer Enable bit
   441                           ;	WDT = ON, WDT enabled
   442                           ;	Watchdog Timer Postscale Select bits
   443                           ;	WDTPS = 32768, 1:32768
   444   300003                     	org	3145731
   445   300003  1F                 	db	31
   446                           
   447                           ; Padding undefined space
   448   300004                     	org	3145732
   449   300004  FF                 	db	255
   450                           
   451                           ;Config register CONFIG3H @ 0x300005
   452                           ;	CCP2 MUX bit
   453                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
   454                           ;	PORTB A/D Enable bit
   455                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
   456                           ;	Low-Power Timer 1 Oscillator Enable bit
   457                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
   458                           ;	MCLR Pin Enable bit
   459                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
   460   300005                     	org	3145733
   461   300005  83                 	db	131
   462                           
   463                           ;Config register CONFIG4L @ 0x300006
   464                           ;	Stack Full/Underflow Reset Enable bit
   465                           ;	STVREN = ON, Stack full/underflow will cause Reset
   466                           ;	Single-Supply ICSP Enable bit
   467                           ;	LVP = ON, Single-Supply ICSP enabled
   468                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
   469                           ;	ICPRT = OFF, ICPORT disabled
   470                           ;	Extended Instruction Set Enable bit
   471                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
   472                           ;	Background Debugger Enable bit
   473                           ;	DEBUG = 0x1, unprogrammed default
   474   300006                     	org	3145734
   475   300006  85                 	db	133
   476                           
   477                           ; Padding undefined space
   478   300007                     	org	3145735
   479   300007  FF                 	db	255
   480                           
   481                           ;Config register CONFIG5L @ 0x300008
   482                           ;	Code Protection bit
   483                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
   484                           ;	Code Protection bit
   485                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
   486                           ;	Code Protection bit
   487                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
   488                           ;	Code Protection bit
   489                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
   490   300008                     	org	3145736
   491   300008  0F                 	db	15
   492                           
   493                           ;Config register CONFIG5H @ 0x300009
   494                           ;	Boot Block Code Protection bit
   495                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
   496                           ;	Data EEPROM Code Protection bit
   497                           ;	CPD = OFF, Data EEPROM is not code-protected
   498   300009                     	org	3145737
   499   300009  C0                 	db	192
   500                           
   501                           ;Config register CONFIG6L @ 0x30000A
   502                           ;	Write Protection bit
   503                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
   504                           ;	Write Protection bit
   505                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
   506                           ;	Write Protection bit
   507                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
   508                           ;	Write Protection bit
   509                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
   510   30000A                     	org	3145738
   511   30000A  0F                 	db	15
   512                           
   513                           ;Config register CONFIG6H @ 0x30000B
   514                           ;	Configuration Register Write Protection bit
   515                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
   516                           ;	Boot Block Write Protection bit
   517                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
   518                           ;	Data EEPROM Write Protection bit
   519                           ;	WRTD = OFF, Data EEPROM is not write-protected
   520   30000B                     	org	3145739
   521   30000B  E0                 	db	224
   522                           
   523                           ;Config register CONFIG7L @ 0x30000C
   524                           ;	Table Read Protection bit
   525                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
   526                           ;	Table Read Protection bit
   527                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
   528                           ;	Table Read Protection bit
   529                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
   530                           ;	Table Read Protection bit
   531                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
   532   30000C                     	org	3145740
   533   30000C  0F                 	db	15
   534                           
   535                           ;Config register CONFIG7H @ 0x30000D
   536                           ;	Boot Block Table Read Protection bit
   537                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
   538   30000D                     	org	3145741
   539   30000D  40                 	db	64
   540                           tosu	equ	0xFFF
   541                           tosh	equ	0xFFE
   542                           tosl	equ	0xFFD
   543                           stkptr	equ	0xFFC
   544                           pclatu	equ	0xFFB
   545                           pclath	equ	0xFFA
   546                           pcl	equ	0xFF9
   547                           tblptru	equ	0xFF8
   548                           tblptrh	equ	0xFF7
   549                           tblptrl	equ	0xFF6
   550                           tablat	equ	0xFF5
   551                           prodh	equ	0xFF4
   552                           prodl	equ	0xFF3
   553                           indf0	equ	0xFEF
   554                           postinc0	equ	0xFEE
   555                           postdec0	equ	0xFED
   556                           preinc0	equ	0xFEC
   557                           plusw0	equ	0xFEB
   558                           fsr0h	equ	0xFEA
   559                           fsr0l	equ	0xFE9
   560                           wreg	equ	0xFE8
   561                           indf1	equ	0xFE7
   562                           postinc1	equ	0xFE6
   563                           postdec1	equ	0xFE5
   564                           preinc1	equ	0xFE4
   565                           plusw1	equ	0xFE3
   566                           fsr1h	equ	0xFE2
   567                           fsr1l	equ	0xFE1
   568                           bsr	equ	0xFE0
   569                           indf2	equ	0xFDF
   570                           postinc2	equ	0xFDE
   571                           postdec2	equ	0xFDD
   572                           preinc2	equ	0xFDC
   573                           plusw2	equ	0xFDB
   574                           fsr2h	equ	0xFDA
   575                           fsr2l	equ	0xFD9
   576                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        32
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      0      32
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      27        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0      0       0       6        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      0      20       1       33.7%
BITBIGSFRh          3E      0       0      21        0.0%
BITBIGSFRlhh        2B      0       0      22        0.0%
BITBIGSFRlll        23      0       0      26        0.0%
BITBIGSFRllhh        8      0       0      24        0.0%
BITBIGSFRllhl        6      0       0      25        0.0%
BITBIGSFRlhl         1      0       0      23        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      20       3        0.0%
DATA                 0      0      20       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Thu Feb 08 23:40:55 2024

                     l17 0802                       u10 081E                       u11 081A  
                     u20 0832                       u21 082E                       u30 0848  
                     u31 0844                       u40 085E                       u41 085A  
                     u50 0874                       u51 0870                       u60 088A  
                     u61 0886                       u70 08A0                       u71 089C  
                     u80 08B6                       u81 08B2                       u90 08CC  
                     u91 08C8                      l720 0836                      l712 0802  
                    l730 0874                      l722 0848                      l714 081E  
                    l740 08A4                      l732 0878                      l724 084C  
                    l716 0822                      l750 08E2                      l742 08B6  
                    l734 088A                      l726 085E                      l718 0832  
                    l760 0912                      l752 08E6                      l744 08BA  
                    l736 088E                      l728 0862                      l770 0950  
                    l762 0924                      l754 08F8                      l746 08CC  
                    l738 08A0                      l772 0954                      l764 0928  
                    l756 08FC                      l748 08D0                      l774 0966  
                    l766 093A                      l758 090E                      l768 093E  
                    u100 08E2                      u101 08DE                      u110 08F8  
                    u111 08F4                      u120 090E                      u121 090A  
                    u130 0924                      u131 0920                      u140 093A  
                    u141 0936                      u150 0950                      u151 094C  
                    u160 0966                      u161 0962                     _LATB 0F8A  
                   _main 0802                     fsr1l 0FE1                     start 0000  
           ___param_bank 0000                    ?_main 0000                    _PORTD 0F83  
                  _TRISB 0F93                    _TRISD 0F95                    tablat 0FF5  
                  status 0FD8          __initialization 0972             __end_of_main 0972  
                 ??_main 0000            __activetblptr 0000                   _ADCON1 0FC1  
                 isa$std 0001             __pdataCOMRAM 0001             __mediumconst 0000  
                 tblptrh 0FF7                   tblptrl 0FF6                   tblptru 0FF8  
             __accesstop 0060  __end_of__initialization 0992            ___rparam_used 0001  
         __pcstackCOMRAM 0000                  __Hparam 0000                  __Lparam 0000  
           __psmallconst 0800                  __pcinit 0972                  __ramtop 0800  
                __ptext0 0802     end_of_initialization 0992                  postdec1 0FE5  
                postinc0 0FEE            __pidataCOMRAM 0998      start_initialization 0972  
            __smallconst 0800                copy_data0 0986                 __Hrparam 0000  
               __Lrparam 0000                 isa$xinst 0000            _display_array 0001  
